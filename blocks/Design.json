[{"code":"","color":"#00000000","name":"muz","typeName":"thooo","palette":"103","type":"h","spec":"Blocks made with ‚ô•Ô∏è by Alfaware Tutorials  "},{"code":"%1$s.getLayoutParams().height \u003d (int)%2$s;\n%1$s.requestLayout();\n%1$s.getLayoutParams().width \u003d (int)%3$s;\n%1$s.requestLayout();","color":"#FF00E7C9","name":"height","typeName":"setHeight","palette":"103","type":" ","spec":"setHeight (  %m.view   ) height (  %d   ) width (  %d   )"},{"code":"android.graphics.drawable.GradientDrawable gd \u003d new android.graphics.drawable.GradientDrawable();\ngd.setColor(Color.parseColor(%4$s));\ngd.setCornerRadius((int)%2$s);\n%1$s.setBackground(gd);\n\nif (Build.VERSION.SDK_INT \u003e\u003d 21){\n%1$s.setElevation((int)%3$s);}","color":"#FF00E7C9","name":"cardwo","typeName":"whope","palette":"103","type":" ","spec":"makeCardStyle (  %m.view   ) round (  %d   ) shadow (  %d   ) color (  %s   )"},{"code":"try{ \n\tgetSupportActionBar().hide(); \n} catch (Exception e){}","color":"#FF00E7C9","name":"hide","typeName":"drawerr","palette":"103","type":" ","spec":"hideDrawer"},{"code":"","color":"#00000000","name":"fabname","typeName":"okh","palette":"103","type":"h","spec":"üîµ Fab"},{"code":"_fab.setBackgroundTintList(android.content.res.ColorStateList.valueOf(Color.parseColor(%1$s)));","color":"#FF00E7C9","name":"fabCo","typeName":"lor(fab)","palette":"103","type":" ","spec":"setFabColor (  %s   ) "},{"code":"//Thank you Universal SketchCode for this code.\n\n_fab.setRippleColor(Color.parseColor(%1$s));","color":"#FF00E7C9","name":"RpleF","typeName":"fabRipple","palette":"103","type":" ","spec":"RippleColor Fab (  %s   )"},{"code":"Animation makeInAnimation \u003d AnimationUtils.makeInAnimation(getBaseContext(), false);\nmakeInAnimation.setAnimationListener(new Animation.AnimationListener() {\n    @Override\n    public void onAnimationEnd(Animation animation) { }\n\n    @Override\n    public void onAnimationRepeat(Animation animation) { }\n\n    @Override\n    public void onAnimationStart(Animation animation) {\n        _fab.setVisibility(View.VISIBLE);\n    }\n});\n\nAnimation makeOutAnimation \u003d AnimationUtils.makeOutAnimation(getBaseContext(), true);\nmakeOutAnimation.setAnimationListener(new Animation.AnimationListener() {\n    @Override\n    public void onAnimationEnd(Animation animation) {\n        _fab.setVisibility(View.INVISIBLE);\n    }\n\n    @Override\n    public void onAnimationRepeat(Animation animation) { }\n\n    @Override\n    public void onAnimationStart(Animation animation) { }\n});\n\n// ...\n\nif (_fab.isShown()) {\n    _fab.startAnimation(makeOutAnimation);\n}\n\n// ...\n\nif (!_fab.isShown()) {\n    _fab.startAnimation(makeInAnimation);\n}","color":"#FF00E7C9","name":"fabAn","typeName":"fabAnim","palette":"103","type":" ","spec":"Fab Animation S/H"},{"code":"","color":"#00000000","name":"butn-header","typeName":"but","palette":"103","type":"h","spec":"üîµ Buttons"},{"code":"%1$s.setBackground(Drawables.getSelectableDrawableFor(Color.parseColor(%2$s)));\n%1$s.setClickable(true);\n\n}\n\npublic static class Drawables {\n    public static android.graphics.drawable.Drawable getSelectableDrawableFor(int color) {\n        if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.LOLLIPOP) {\n            android.graphics.drawable.StateListDrawable stateListDrawable \u003d new android.graphics.drawable.StateListDrawable();\n            stateListDrawable.addState(\n                new int[]{android.R.attr.state_pressed},\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#ffffff\"))\n            );\n            stateListDrawable.addState(\n                new int[]{android.R.attr.state_focused},\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#00ffffff\"))\n            );\n            stateListDrawable.addState(\n                new int[]{},\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#00ffffff\"))\n            );\n            return stateListDrawable;\n        } else {\n            android.content.res.ColorStateList pressedColor \u003d android.content.res.ColorStateList.valueOf(color);\n            android.graphics.drawable.ColorDrawable defaultColor \u003d new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#00ffffff\"));\n            \nandroid.graphics.drawable.Drawable rippleColor \u003d getRippleColor(color);\n            return new android.graphics.drawable.RippleDrawable(\n                pressedColor,\n                defaultColor,\n                rippleColor\n            );\n        }\n    }\n\n    private static android.graphics.drawable.Drawable getRippleColor(int color) {\n        float[] outerRadii \u003d new float[8];\n        Arrays.fill(outerRadii, 0);\n        android.graphics.drawable.shapes.RoundRectShape r \u003d new android.graphics.drawable.shapes.RoundRectShape(outerRadii, null, null);\n        \nandroid.graphics.drawable.ShapeDrawable shapeDrawable \u003d new \nandroid.graphics.drawable.ShapeDrawable(r);\n        shapeDrawable.getPaint().setColor(color);\n        return shapeDrawable;\n    }\n \n    private static int lightenOrDarken(int color, double fraction) {\n        if (canLighten(color, fraction)) {\n            return lighten(color, fraction);\n        } else {\n            return darken(color, fraction);\n        }\n    }\n \n    private static int lighten(int color, double fraction) {\n        int red \u003d Color.red(color);\n        int green \u003d Color.green(color);\n        int blue \u003d Color.blue(color);\n        red \u003d lightenColor(red, fraction);\n        green \u003d lightenColor(green, fraction);\n        blue \u003d lightenColor(blue, fraction);\n        int alpha \u003d Color.alpha(color);\n        return Color.argb(alpha, red, green, blue);\n    }\n \n    private static int darken(int color, double fraction) {\n        int red \u003d Color.red(color);\n        int green \u003d Color.green(color);\n        int blue \u003d Color.blue(color);\n        red \u003d darkenColor(red, fraction);\n        green \u003d darkenColor(green, fraction);\n        blue \u003d darkenColor(blue, fraction);\n        int alpha \u003d Color.alpha(color);\n \n        return Color.argb(alpha, red, green, blue);\n    }\n \n    private static boolean canLighten(int color, double fraction) {\n        int red \u003d Color.red(color);\n        int green \u003d Color.green(color);\n        int blue \u003d Color.blue(color);\n        return canLightenComponent(red, fraction)\n            \u0026\u0026 canLightenComponent(green, fraction)\n            \u0026\u0026 canLightenComponent(blue, fraction);\n    }\n \n    private static boolean canLightenComponent(int colorComponent, double fraction) {\n        int red \u003d Color.red(colorComponent);\n        int green \u003d Color.green(colorComponent);\n        int blue \u003d Color.blue(colorComponent);\n        return red + (red * fraction) \u003c 255\n            \u0026\u0026 green + (green * fraction) \u003c 255\n            \u0026\u0026 blue + (blue * fraction) \u003c 255;\n    }\n \n    private static int darkenColor(int color, double fraction) {\n        return (int) Math.max(color - (color * fraction), 0);\n    }\n \n    private static int lightenColor(int color, double fraction) {\n        return (int) Math.min(color + (color * fraction), 255);\n    }\n}\npublic static class CircleDrawables {\n    public static android.graphics.drawable.Drawable getSelectableDrawableFor(int color) {\n        if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.LOLLIPOP) {\n            android.graphics.drawable.StateListDrawable stateListDrawable \u003d new android.graphics.drawable.StateListDrawable();\n            stateListDrawable.addState(\n                new int[]{android.R.attr.state_pressed},\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#ffffff\"))\n            );\n            stateListDrawable.addState(\n                new int[]{android.R.attr.state_focused},\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#00ffffff\"))\n            );\n            stateListDrawable.addState(\n                new int[]{},\n                new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#00ffffff\"))\n            );\n            return stateListDrawable;\n        } else {\n            android.content.res.ColorStateList pressedColor \u003d android.content.res.ColorStateList.valueOf(color);\n            android.graphics.drawable.ColorDrawable defaultColor \u003d new android.graphics.drawable.ColorDrawable(Color.parseColor(\"#00ffffff\"));\n            \nandroid.graphics.drawable.Drawable rippleColor \u003d getRippleColor(color);\n            return new android.graphics.drawable.RippleDrawable(\n                pressedColor,\n                defaultColor,\n                rippleColor\n            );\n        }\n    }\n\n    private static android.graphics.drawable.Drawable getRippleColor(int color) {\n        float[] outerRadii \u003d new float[180];\n        Arrays.fill(outerRadii, 80);\n        android.graphics.drawable.shapes.RoundRectShape r \u003d new android.graphics.drawable.shapes.RoundRectShape(outerRadii, null, null);\n        \nandroid.graphics.drawable.ShapeDrawable shapeDrawable \u003d new \nandroid.graphics.drawable.ShapeDrawable(r);\n        shapeDrawable.getPaint().setColor(color);\n        return shapeDrawable;\n    }\n \n    private static int lightenOrDarken(int color, double fraction) {\n        if (canLighten(color, fraction)) {\n            return lighten(color, fraction);\n        } else {\n            return darken(color, fraction);\n        }\n    }\n \n    private static int lighten(int color, double fraction) {\n        int red \u003d Color.red(color);\n        int green \u003d Color.green(color);\n        int blue \u003d Color.blue(color);\n        red \u003d lightenColor(red, fraction);\n        green \u003d lightenColor(green, fraction);\n        blue \u003d lightenColor(blue, fraction);\n        int alpha \u003d Color.alpha(color);\n        return Color.argb(alpha, red, green, blue);\n    }\n \n    private static int darken(int color, double fraction) {\n        int red \u003d Color.red(color);\n        int green \u003d Color.green(color);\n        int blue \u003d Color.blue(color);\n        red \u003d darkenColor(red, fraction);\n        green \u003d darkenColor(green, fraction);\n        blue \u003d darkenColor(blue, fraction);\n        int alpha \u003d Color.alpha(color);\n \n        return Color.argb(alpha, red, green, blue);\n    }\n \n    private static boolean canLighten(int color, double fraction) {\n        int red \u003d Color.red(color);\n        int green \u003d Color.green(color);\n        int blue \u003d Color.blue(color);\n        return canLightenComponent(red, fraction)\n            \u0026\u0026 canLightenComponent(green, fraction)\n            \u0026\u0026 canLightenComponent(blue, fraction);\n    }\n \n    private static boolean canLightenComponent(int colorComponent, double fraction) {\n        int red \u003d Color.red(colorComponent);\n        int green \u003d Color.green(colorComponent);\n        int blue \u003d Color.blue(colorComponent);\n        return red + (red * fraction) \u003c 255\n            \u0026\u0026 green + (green * fraction) \u003c 255\n            \u0026\u0026 blue + (blue * fraction) \u003c 255;\n    }\n \n    private static int darkenColor(int color, double fraction) {\n        return (int) Math.max(color - (color * fraction), 0);\n    }\n \n    private static int lightenColor(int color, double fraction) {\n        return (int) Math.min(color + (color * fraction), 255);\n}\n}\n\npublic void drawableclass() {","color":"#FF00E7C9","name":"cle","typeName":"effected","palette":"103","type":" ","spec":"Click effect (  %m.view   ) color (  %s   )"},{"code":"%1$s.setOnTouchListener(new View.OnTouchListener() {\n@Override\npublic boolean onTouch(View v, MotionEvent event) {\nswitch (event.getAction()){\ncase MotionEvent.ACTION_DOWN:{\nObjectAnimator scaleX \u003d new ObjectAnimator();\nscaleX.setTarget(%1$s);\nscaleX.setPropertyName(\"scaleX\");\nscaleX.setFloatValues(0.9f);\nscaleX.setDuration(%2$s);\nscaleX.start();\n\nObjectAnimator scaleY \u003d new ObjectAnimator();\nscaleY.setTarget(%1$s);\nscaleY.setPropertyName(\"scaleY\");\nscaleY.setFloatValues(0.9f);\nscaleY.setDuration(%2$s);\nscaleY.start();\nbreak;\n}\ncase MotionEvent.ACTION_UP:{\n\nObjectAnimator scaleX \u003d new ObjectAnimator();\nscaleX.setTarget(%1$s);\nscaleX.setPropertyName(\"scaleX\");\nscaleX.setFloatValues((float)1);\nscaleX.setDuration(%2$s);\nscaleX.start();\n\nObjectAnimator scaleY \u003d new ObjectAnimator();\nscaleY.setTarget(%1$s);\nscaleY.setPropertyName(\"scaleY\");\nscaleY.setFloatValues((float)1);\nscaleY.setDuration(%2$s);\nscaleY.start();\n\nbreak;\n}\n}\nreturn false;\n}\n});","color":"#FF00E7C9","name":"super","typeName":"toucher","palette":"103","type":" ","spec":"superTouch (  %m.view   ) setDurationEffect (  %d   )"},{"code":"100","color":"#FF00E7C9","name":"normalDura","typeName":"Tionnn","palette":"103","type":"d","spec":"normalDuration"},{"code":"","color":"#00000000","name":"statool","typeName":"statoolb","palette":"103","type":"h","spec":"üîµ Status/toolBar"},{"code":"((ViewGroup)%1$s.getParent()).removeView(%1$s);\r\n_toolbar.addView(%1$s);","color":"#FF00E7C9","name":"toolbar","typeName":"firster","palette":"103","type":" ","spec":"add (  %m.view   ) toToolBar"},{"code":"if (Build.VERSION.SDK_INT \u003e Build.VERSION_CODES.LOLLIPOP) { \n\t   Window w \u003d this.getWindow(); w.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); w.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n\t   w.setStatusBarColor(Color.parseColor(%1$s)); w.setNavigationBarColor(Color.parseColor(%2$s));\n}","color":"#FF00E7C9","name":"sbcol","typeName":"setsbc","palette":"103","type":" ","spec":"setStatusBarColor (  %s    ) setNavigationBarColor (  %s   )"},{"code":"try {\n\t\n\tif (Build.VERSION.SDK_INT \u003e\u003d 19 \u0026\u0026 Build.VERSION.SDK_INT \u003c 21) {\n\t\tsetWindowFlag(this, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, true);\n\t};\n\t\n\tif (Build.VERSION.SDK_INT \u003e\u003d 19) {\n\t\tgetWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n\t};\n\t\n\tif (Build.VERSION.SDK_INT \u003e\u003d 21) {\n\t\tsetWindowFlag(this, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, false); getWindow().setStatusBarColor(Color.TRANSPARENT);\n\t};\n\t\n} catch(Exception e) {\n\t\n\tView decorView \u003d getWindow().getDecorView();\n\t\n\tdecorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN);\r\n};\r\n}\n\npublic static void setWindowFlag(Activity activity, final int bits, boolean on) {\nWindow win \u003d activity.getWindow(); WindowManager.LayoutParams winParams \u003d win.getAttributes();\nif (on) {\n\twinParams.flags |\u003d bits;\n} else {\n\twinParams.flags \u0026\u003d ~bits;\n};\nwin.setAttributes(winParams);","color":"#FF00E7C9","name":"tranSta","typeName":"tusBarrrr","palette":"103","type":" ","spec":"setStatusBar Transparent"},{"code":"","color":"#00000000","name":"lis","typeName":"tvieww","palette":"103","type":"h","spec":"üîµ Listview"},{"code":"try {\r\n\tcom.google.android.material.appbar.AppBarLayout.LayoutParams params \u003d (com.google.android.material.appbar.AppBarLayout.LayoutParams)_toolbar.getLayoutParams();\n\t \n\tparams.setScrollFlags(com.google.android.material.appbar.AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL | com.google.android.material.appbar.AppBarLayout.LayoutParams.SCROLL_FLAG_ENTER_ALWAYS | com.google.android.material.appbar.AppBarLayout.LayoutParams.SCROLL_FLAG_SNAP);\r\n\tandroidx.core.widget.NestedScrollView nestedScrollView \u003d new androidx.core.widget.NestedScrollView(this);\n\t\n\tLinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n\t\n\tnestedScrollView.setLayoutParams(layoutParams);\n\t\n\t/*\n((ViewGroup)((LinearLayout)_nested).getParent()).removeView(_nested);\n\n((LinearLayout)_back).removeAllViews();\n\n((LinearLayout)_back).addView(nestedScrollView);\n\nnestedScrollView.addView(_nested);\n*/\r\n\tandroidx.core.view.ViewCompat.setNestedScrollingEnabled(%1$s, true);\r\n} catch(Exception e) {\r\n\tSketchwareUtil.showMessage(getApplicationContext(), \"Error, available only for listview\");\r\n}","color":"#FF00E7C9","name":"LIstviewAnim","typeName":"wowoowowowowoowowoowow","palette":"103","type":" ","spec":"Listview (  %m.listview   ) changeToolbarScroll"}]